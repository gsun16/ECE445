#include <AMY-Arduino.h>
#include <ESP_I2S.h>
#include "ShiftRegisterInKeyboard.h"

#define CONFIG_I2S_BCLK  23
#define CONFIG_I2S_LRCLK 1
#define CONFIG_I2S_DIN   22
#define NUM_VOICES        6
#define LED_PIN           2
#define OCTAVE            4
#define MAX_VOICES       16
#define MAX_NOTES_PER_CHORD 7

AMY amy;
I2SClass I2S;
// Keyboard keyboard;
ShiftRegisterInKeyboard keyboard;

// Keep track of the voices being used
struct Voice {
    bool active;
    byte note;
    unsigned long lastUsed;
} voicer[MAX_VOICES];

// Mutex that locks writes to the delta queue
SemaphoreHandle_t xQueueSemaphore;

// Task handles
TaskHandle_t amy_render_handle;
TaskHandle_t amy_fill_buffer_handle;

#define AMY_TASK_COREID                 (1)
#define AMY_RENDER_TASK_COREID          (0)
#define AMY_FILL_BUFFER_TASK_COREID     (1)
#define AMY_RENDER_TASK_PRIORITY        (ESP_TASK_PRIO_MAX - 1)
#define AMY_FILL_BUFFER_TASK_PRIORITY   (ESP_TASK_PRIO_MAX - 1)
#define AMY_TASK_NAME                   "alles_task"
#define AMY_RENDER_TASK_NAME            "alles_r_task"
#define AMY_FILL_BUFFER_TASK_NAME       "alles_fb_task"
#define AMY_TASK_STACK_SIZE             (8 * 1024)
#define AMY_RENDER_TASK_STACK_SIZE      (8 * 1024)
#define AMY_FILL_BUFFER_TASK_STACK_SIZE (8 * 1024)

bool isAnyVoiceActive() {
    for (int i = 0; i < MAX_VOICES; i++) {
        if (voicer[i].active) {
            return true;
        }
    }
    return false;
}

// Finds a free voice. It can be either a 
// voice not in use or the oldest one in use
int getFreeVoice() {
  int voiceIndex = -1;
  long oldestVoiceTimestamp = millis();
  for (int i = 0; i < MAX_VOICES; i++) {
      if (!voicer[i].active) {
          return i; 
      } else if (voicer[i].lastUsed < oldestVoiceTimestamp) {
          oldestVoiceTimestamp = voicer[i].lastUsed;
          voiceIndex = i;
      }
  }
  return voiceIndex;
}

int getOccupiedVoice(byte note) {
    for (int i = 0; i < MAX_VOICES; i++) {
        if (voicer[i].note == note && voicer[i].active) {
            return i;
        }
    }
    return -1;
}

byte getNote(int key) {
    // If key == 0 and OCTAVE == 4, then return 60 == C4
    return (12 * OCTAVE) + 12 + key;
}

void handleVoice(Voice voice, int voiceIndex) {
    struct event e = amy.default_event();
    e.midi_note = voice.note;
    e.velocity = voice.active ? 1 : 0;
    sprintf(e.voices, "%d", voiceIndex); // Convert the int index to char[]
    amy.add_event(e);
}

void noteOn(int key) {
    byte note = getNote(key);
    if (getOccupiedVoice(note) != -1) {
        return; // This note is being played already, ignore it
    }
    if (int freeVoiceIndex = getFreeVoice(); freeVoiceIndex != -1) {
        voicer[freeVoiceIndex].active = true;
        voicer[freeVoiceIndex].note = note;
        handleVoice(voicer[freeVoiceIndex], freeVoiceIndex);
        digitalWrite(LED_PIN, HIGH); // Turn LED ON
    }
}

void noteOff(int key) {
    byte note = getNote(key);
    if (int occupiedVoiceIndex = getOccupiedVoice(note); occupiedVoiceIndex != -1) {
        voicer[occupiedVoiceIndex].active = false;
        handleVoice(voicer[occupiedVoiceIndex], occupiedVoiceIndex);
    }
    if (!isAnyVoiceActive()) {
        digitalWrite(LED_PIN, LOW); // No voice is active, LED OFF
    }
}

// auto music stuff
// This is a simple melody that plays when the program starts
struct NoteEvent {
    int key;
    int duration; // milliseconds
  };
  
NoteEvent melody[] = {
{4, 300}, {4, 300}, {5, 300}, {7, 300}, //3345
{7, 300}, {5, 300}, {4, 300}, {2, 300}, //5432
{0, 300}, {0, 300}, {2, 300}, {4, 300}, //1123
{4, 300}, {2, 300}, {2, 300},           //322
{4, 300}, {4, 300}, {5, 300}, {7, 300}, //3345
{7, 300}, {5, 300}, {4, 300}, {2, 300}, //5432
{0, 300}, {0, 300}, {2, 300}, {4, 300}, //1123
{2, 300}, {0, 300}, {0, 300},           //211
};

const int melodyLength = sizeof(melody) / sizeof(NoteEvent);

void playMelody() {
for (int i = 0; i < melodyLength; i++) {
    noteOn(melody[i].key);
    delay(melody[i].duration);
    noteOff(melody[i].key);
    //delay(50); // brief rest between notes
}
}

//chords

struct ChordEvent {
  int keys[MAX_NOTES_PER_CHORD];       // notes (ignored for rests)
  int keyCount;      // 0 = rest
  int duration;      // in milliseconds
};

void playChord(const ChordEvent& chord) {
  if (chord.keyCount == 0) {
    // It's a rest
    delay(chord.duration);
    return;
  }

  for (int i = 0; i < chord.keyCount; i++) {
    noteOn(chord.keys[i]);
  }

  delay(chord.duration);

  for (int i = 0; i < chord.keyCount; i++) {
    noteOff(chord.keys[i]);
  }
}

//kukushka
/*
  ChordEvent chordProgression[] = {
    {{16}, 1, 300},
    {{16}, 1, 600},
    {{14}, 1, 300},
    {{16}, 1, 600},
    {{16}, 1, 300},
    {{14}, 1, 300},
    {{16}, 1, 300},
    {{14}, 1, 600},
    {{16}, 1, 899},
    {{16}, 0, 600},  // rest
    {{16}, 1, 600},
    {{16}, 1, 1200},
    {{16}, 0, 1500},  // rest
    {{16}, 1, 300},
    {{16}, 1, 600},
    {{12}, 1, 600},
    {{14}, 1, 600},
    {{11}, 1, 1200},
    {{11}, 0, 2400},  // rest
    {{17}, 1, 600},
    {{16}, 1, 1200},
    {{16}, 0, 3599},  // rest
    {{16}, 1, 300},
    {{16}, 1, 300},
    {{16}, 1, 300},
    {{14}, 1, 300},
    {{16}, 1, 300},
    {{16}, 1, 300},
    {{16}, 1, 300},
    {{14}, 1, 300},
    {{16}, 1, 600},
    {{19}, 1, 600},
    {{16}, 1, 1200},
    {{16}, 1, 300},
    {{16}, 1, 600},
    {{14}, 1, 300},
    {{16}, 1, 600},
    {{16}, 0, 600},  // rest
    {{16}, 1, 300},
    {{16}, 1, 600},
    {{14}, 1, 300},
    {{16}, 1, 600},
    {{12}, 1, 600},
    {{14}, 1, 600},
    {{11}, 1, 1200},
    {{11}, 0, 2400},  // rest
    {{12}, 1, 600},
    {{9}, 1, 1200},
    {{9}, 0, 4800},  // rest
    {{11}, 1, 600},
    {{11}, 1, 300},
    {{11}, 1, 300},
    {{12}, 1, 899},
    {{9}, 1, 300},
    {{9}, 1, 600},
    {{17}, 1, 300},
    {{17}, 1, 300},
    {{16}, 1, 1200},
    {{16}, 0, 4500},  // rest
    {{11}, 1, 300},
    {{11}, 1, 600},
    {{11}, 1, 600},
    {{9}, 1, 600},
    {{9}, 1, 300},
    {{7}, 1, 300},
    {{9}, 1, 300},
    {{9}, 1, 600},
    {{12}, 1, 300},
    {{9}, 1, 1200},
    {{9}, 0, 4500},  // rest
    {{11}, 1, 300},
    {{11}, 1, 300},
    {{11}, 1, 300},
    {{11}, 1, 600},
    {{12}, 1, 300},
    {{12}, 1, 899},
    {{9}, 1, 600},
    {{17}, 1, 600},
    {{16}, 1, 1200},
    {{16}, 0, 7800},  // rest
    {{12}, 1, 600},
    {{9}, 1, 1200},
    };
*/
// katyusha
/* 
ChordEvent chordProgression[] = {
  {{-10, 9, 21}, 3, 250},
  {{-7, -3, 9, 21}, 4, 250},
  {{-7, -3, 14, 26}, 4, 250},
  {{-7, -3, 14, 26}, 4, 250},
  {{-6}, 1, 250},
  {{-17, 12, 24}, 3, 250},
  {{-3, 2}, 2, 250},
  {{-10, -2, 12, 24}, 4, 250},
  {{-3, 2}, 2, 250},
  {{-10, -2, 14, 26}, 4, 250},
  {{-3, 2}, 2, 250},
  {{-10, -2, 12, 24}, 4, 250},
  {{-22, 10, 22}, 3, 250},
  {{-15, -10, 10, 22}, 4, 250},
  {{-15, -10, 9, 21}, 4, 250},
  {{-15, -10, 7, 19}, 4, 250},
  {{-17, 9, 21}, 3, 250},
  {{-10, -2, 9, 21}, 4, 250},
  {{-10, -2, 2, 14}, 4, 250},
  {{-10, -2, 2, 14}, 4, 250},
  {{-22}, 1, 250},
  {{-15, -11, 10, 22}, 4, 250},
  {{-15, -11, 10, 22}, 4, 250},
  {{-15, -11, 7, 19}, 4, 250},
  {{-15, 9, 21}, 3, 250},
  {{-11, -8, 9, 21}, 4, 250},
  {{-11, -8, 9, 21}, 4, 250},
  {{-11, -8, 5, 17}, 4, 250},
  {{-15, -3, 4, 16}, 4, 250},
  {{-10, -7, -3, 9}, 4, 250},
  {{-10, -5, 5, 17}, 4, 250},
  {{-11, -8, 4, 16}, 4, 250},
  {{-10, 2, 14}, 3, 250},
  {{2, 14}, 2, 250},
  {{-22, 2, 14}, 3, 500},
  {{-10}, 1, 250},
  {{-7, -3}, 2, 250},
  {{-10}, 1, 250},
  {{-7, -3}, 2, 250},
  {{-10, 2}, 2, 250},
  {{-7, -3, 2}, 3, 250},
  {{-10, 2}, 2, 250},
  {{-7, -3, 4}, 3, 250},
  {{-14, 5}, 2, 250},
  {{-10, -7, 5}, 3, 250},
  {{-15, 5}, 2, 250},
  {{-10, -7, 2}, 3, 250},
  {{-15, 5}, 2, 250},
  {{-11, -8, 5}, 3, 250},
  {{-15, 4}, 2, 250},
  {{-11, -8, 2}, 3, 250},
  {{-15, 4}, 2, 250},
  {{-11, -8, 4}, 3, 250},
  {{-15, -3}, 2, 250},
  {{-11, -8, -3}, 3, 250},
  {{-15, 4}, 2, 250},
  {{-11, -8, 4}, 3, 250},
  {{-15, 4}, 2, 250},
  {{-11, -8, 5}, 3, 250},
  {{-15, 7}, 2, 250},
  {{-11, -8, 7}, 3, 250},
  {{-15, 7}, 2, 250},
  {{-11, -8, 4}, 3, 250},
  {{-10, 7}, 2, 125},
  {{-11, 7}, 2, 125},
  {{-10, 7}, 2, 125},
  {{-8, 7}, 2, 125},
  {{-7, 5}, 2, 125},
  {{-8, 5}, 2, 125},
  {{-7, 4}, 2, 125},
  {{-3, 4}, 2, 125},
  {{-22, 2}, 2, 250},
  {{-7, -3, 2}, 3, 250},
  {{-7, -3, 2}, 3, 250},
  {{-7, -3, 2}, 3, 250},
  {{-6, 5, 9}, 3, 250},
  {{-3, 2, 5, 9}, 4, 250},
  {{-3, 2, 9, 14}, 4, 250},
  {{-3, 2, 9, 14}, 4, 250},
  {{-17, 6, 12}, 3, 250},
  {{-14, -10, 6, 12}, 4, 250},
  {{-14, -10, 6, 14}, 4, 250},
  {{-14, -10, 6, 12}, 4, 250},
  {{-22, 7, 10}, 3, 250},
  {{-10, -7, 7, 10}, 4, 250},
  {{-10, -7, 2, 9}, 4, 250},
  {{-10, -7, 2, 7}, 4, 250},
  {{-17, 5, 9}, 3, 250},
  {{-10, -2, 5, 9}, 4, 250},
  {{-10, -3, -2, 2}, 4, 250},
  {{-10, -3, -2, 2}, 4, 250},
  {{-10}, 1, 250},
  {{-7, -3, 7, 10}, 4, 250},
  {{-7, -3, 7, 10}, 4, 250},
  {{-7, -3, 7}, 3, 250},
  {{-15, 5, 9}, 3, 250},
  {{-11, -8, 5, 9}, 4, 250},
  {{-11, -8, 5, 9}, 4, 250},
  {{-11, -8, 5}, 3, 250},
  {{-10, -3, 4}, 3, 250},
  {{-7, -3}, 2, 250},
  {{-5, 5}, 2, 250},
  {{-8, 4}, 2, 250},
  {{-10, 2}, 2, 250},
  {{-3, 2}, 2, 250},
  {{-7, 2}, 2, 250},
  {{-3, 2}, 2, 250},
  {{-10, 2}, 2, 250},
  {{-3, 2}, 2, 250},
  {{-7, 2}, 2, 250},
  {{-3, 4}, 2, 250},
  {{-14, 5}, 2, 250},
  {{-7, 5}, 2, 250},
  {{-10, 5}, 2, 250},
  {{-7, 2}, 2, 250},
  {{-15, 5}, 2, 250},
  {{-8, 5}, 2, 250},
  {{-11, 4}, 2, 250},
  {{-15, 2}, 2, 250},
  {{-15, 4}, 2, 250},
  {{-8, 4}, 2, 250},
  {{-11, -3}, 2, 250},
  {{-8, -3}, 2, 250},
  {{-15, 4}, 2, 250},
  {{-8, 4}, 2, 250},
  {{-11, 4}, 2, 250},
  {{-8, 5}, 2, 250},
  {{-15, 7}, 2, 250},
  {{-8, 7}, 2, 250},
  {{-11, 7}, 2, 250},
  {{-15, 4}, 2, 250},
  {{-10, 7}, 2, 125},
  {{-11, 7}, 2, 125},
  {{-10, 7}, 2, 125},
  {{-8, 7}, 2, 125},
  {{-7, 5}, 2, 125},
  {{-8, 5}, 2, 125},
  {{-7, 4}, 2, 125},
  {{-3, 4}, 2, 125},
  {{-22, 2}, 2, 250},
  {{-7, -3, 2}, 3, 250},
  {{-7, -3, 2}, 3, 250},
  {{-7, -3, 2}, 3, 250},
  {{-6, 5, 9}, 3, 250},
  {{-3, 2, 5, 9}, 4, 250},
  {{-3, 2, 9, 14}, 4, 250},
  {{-3, 2, 9, 14}, 4, 250},
  {{-17, 6, 12}, 3, 250},
  {{-14, -10, 6, 12}, 4, 250},
  {{-14, -10, 6, 14}, 4, 250},
  {{-14, -10, 6, 12}, 4, 250},
  {{-22, 7, 10}, 3, 250},
  {{-10, -7, 7, 10}, 4, 250},
  {{-10, -7, 2, 9}, 4, 250},
  {{-10, -7, 2, 7}, 4, 250},
  {{-17, 5, 9}, 3, 250},
  {{-10, -2, 5, 9}, 4, 250},
  {{-10, -3, -2, 2}, 4, 250},
  {{-10, -3, -2, 2}, 4, 250},
  {{-10}, 1, 250},
  {{-7, -3, 7, 10}, 4, 250},
  {{-7, -3, 7, 10}, 4, 250},
  {{-7, -3, 7}, 3, 250},
  {{-15, 5, 9}, 3, 250},
  {{-11, -8, 5, 9}, 4, 250},
  {{-11, -8, 5, 9}, 4, 250},
  {{-11, -8, 5}, 3, 250},
  {{-10, 4}, 2, 125},
  {{-11, 4}, 2, 125},
  {{-10, -3}, 2, 125},
  {{-8, -3}, 2, 125},
  {{-7, 5}, 2, 125},
  {{-8, 5}, 2, 125},
  {{-7, 4}, 2, 125},
  {{-3, 4}, 2, 125},
  {{-19, 2}, 2, 250},
  {{-3, 0, 2}, 3, 250},
  {{-3, 0, 2}, 3, 250},
  {{-3, 0, 2}, 3, 250},
  {{-6, 9, 21}, 3, 250},
  {{-3, 2, 9, 21}, 4, 250},
  {{-3, 2, 14, 26}, 4, 250},
  {{-3, 2, 14, 26}, 4, 250},
  {{-17, 12, 24}, 3, 250},
  {{-10, -2, 12, 24}, 4, 250},
  {{-10, -2, 14, 26}, 4, 250},
  {{-10, -2, 12, 24}, 4, 250},
  {{-22, 10, 22}, 3, 250},
  {{-15, -10, 10, 22}, 4, 250},
  {{-15, -10, 9, 21}, 4, 250},
  {{-15, -10, 7, 19}, 4, 250},
  {{-17, 9, 21}, 3, 250},
  {{-10, -5, 9, 21}, 4, 250},
  {{-10, -5, 2, 14}, 4, 250},
  {{-10, -5, 2, 14}, 4, 250},
  {{-22}, 1, 250},
  {{-15, -7, 10, 22}, 4, 250},
  {{-15, -7, 10, 22}, 4, 250},
  {{-15, -7, 7, 19}, 4, 250},
  {{-15, 9, 21}, 3, 250},
  {{-11, -8, 9, 21}, 4, 250},
  {{-11, -8, 9, 21}, 4, 250},
  {{-11, -8, 5, 17}, 4, 250},
  {{-15, -3, 4, 16}, 4, 250},
  {{-10, -7, -3, 9}, 4, 250},
  {{-10, -5, 5, 17}, 4, 250},
  {{-11, -8, 4, 16}, 4, 250},
  {{-9, 2, 14}, 3, 250},
  {{-6, -2, 2, 14}, 4, 250},
  {{-9, 2, 14}, 3, 250},
  {{-6, -2, 2, 14}, 4, 250},
  {{-9, 3}, 2, 250},
  {{-6, -2, 3}, 3, 250},
  {{-9, 3}, 2, 250},
  {{-6, -2, 5}, 3, 250},
  {{-13, 6}, 2, 250},
  {{-9, -6, 6}, 3, 250},
  {{-14, 6}, 2, 250},
  {{-9, -6, 3}, 3, 250},
  {{-14, 6}, 2, 250},
  {{-10, -7, 6}, 3, 250},
  {{-14, 5}, 2, 250},
  {{-10, -7, 3}, 3, 250},
  {{-14, 5}, 2, 250},
  {{-10, -7, 5}, 3, 250},
  {{-14, -2}, 2, 250},
  {{-10, -7, -2}, 3, 250},
  {{-14, 5}, 2, 250},
  {{-10, -7, 5}, 3, 250},
  {{-14, 5}, 2, 250},
  {{-10, -7, 6}, 3, 250},
  {{-14, 8}, 2, 250},
  {{-10, -7, 8}, 3, 250},
  {{-14, 8}, 2, 250},
  {{-10, -7, 5}, 3, 250},
  {{-9, 8}, 2, 125},
  {{-10, 8}, 2, 125},
  {{-9, 8}, 2, 125},
  {{-7, 8}, 2, 125},
  {{-6, 6}, 2, 125},
  {{-7, 6}, 2, 125},
  {{-6, 5}, 2, 125},
  {{-2, 5}, 2, 125},
  {{-9, 3}, 2, 250},
  {{-6, -2, 3}, 3, 250},
  {{-6, -2, 3}, 3, 250},
  {{-6, -2, 3}, 3, 250},
  {{-5, 6, 10}, 3, 250},
  {{-2, 3, 6, 10}, 4, 250},
  {{-2, 3, 10, 15}, 4, 250},
  {{-2, 3, 10, 15}, 4, 250},
  {{-16, 7, 13}, 3, 250},
  {{-9, -1, 7, 13}, 4, 250},
  {{-9, -1, 7, 15}, 4, 250},
  {{-9, -1, 7, 13}, 4, 250},
  {{-21, 8, 11}, 3, 250},
  {{-14, -9, 8, 11}, 4, 250},
  {{-14, -9, 3, 10}, 4, 250},
  {{-14, -9, 3, 8}, 4, 250},
  {{-16, 6, 10}, 3, 250},
  {{-9, -1, 6, 10}, 4, 250},
  {{-9, -2, -1, 3}, 4, 250},
  {{-9, -2, -1, 3}, 4, 250},
  {{-21}, 1, 250},
  {{-14, -10, 8, 11}, 4, 250},
  {{-14, -10, 8, 11}, 4, 250},
  {{-14, -10, 8}, 3, 250},
  {{-14, 6, 10}, 3, 250},
  {{-10, -7, 6, 10}, 4, 250},
  {{-10, -7, 6, 10}, 4, 250},
  {{-10, -7, 6}, 3, 250},
  {{-9, 5}, 2, 250},
  {{-7, -2}, 2, 250},
  {{-6, 6}, 2, 250},
  {{-2, 5}, 2, 250},
  {{-21, 3}, 2, 250},
  {{-6, -2, 3}, 3, 250},
  {{-6, -2, 3}, 3, 250},
  {{-6, -2, 3}, 3, 250},
  {{-5, 6, 10}, 3, 250},
  {{-2, 3, 6, 10}, 4, 250},
  {{-2, 3, 10, 15}, 4, 250},
  {{-2, 3, 10, 15}, 4, 250},
  {{-16, 7, 13}, 3, 250},
  {{-13, -9, 7, 13}, 4, 250},
  {{-13, -9, 7, 15}, 4, 250},
  {{-13, -9, 7, 13}, 4, 250},
  {{-21, 8, 11}, 3, 250},
  {{-9, -6, 8, 11}, 4, 250},
  {{-9, -6, 3, 10}, 4, 250},
  {{-9, -6, 3, 8}, 4, 250},
  {{-16, 6, 10}, 3, 250},
  {{-9, -1, 6, 10}, 4, 250},
  {{-9, -2, -1, 3}, 4, 250},
  {{-9, -2, -1, 3}, 4, 250},
  {{-9}, 1, 250},
  {{-6, -2, 8, 11}, 4, 250},
  {{-6, -2, 8, 11}, 4, 250},
  {{-6, -2, 8}, 3, 250},
  {{-14, 6, 10}, 3, 250},
  {{-10, -7, 6, 10}, 4, 250},
  {{-10, -7, 6, 10}, 4, 250},
  {{-10, -7, 6}, 3, 250},
  {{-9, 5}, 2, 125},
  {{-10, 5}, 2, 125},
  {{-9, -2}, 2, 125},
  {{-7, -2}, 2, 125},
  {{-6, 6}, 2, 125},
  {{-7, 6}, 2, 125},
  {{-6, 5}, 2, 125},
  {{-2, 5}, 2, 125},
  {{-9, 3}, 2, 250},
  {{-6, -2, 3}, 3, 250},
  {{-6, -2, 3}, 3, 250},
  {{-6, -2, 3}, 3, 250},
  {{-5, 6, 10}, 3, 250},
  {{-2, 3, 6, 10}, 4, 250},
  {{-2, 3, 10, 15}, 4, 250},
  {{-2, 3, 10, 15}, 4, 250},
  {{-16, 7, 13}, 3, 250},
  {{-9, -1, 7, 13}, 4, 250},
  {{-9, -1, 7, 15}, 4, 250},
  {{-9, -1, 7, 13}, 4, 250},
  {{-21, 8, 11}, 3, 250},
  {{-14, -9, 8, 11}, 4, 250},
  {{-14, -9, 3, 10}, 4, 250},
  {{-14, -9, 3, 8}, 4, 250},
  {{-16, 6, 10}, 3, 250},
  {{-9, -1, 6, 10}, 4, 250},
  {{-9, -2, -1, 3}, 4, 250},
  {{-9, -2, -1, 3}, 4, 250},
  {{-21}, 1, 250},
  {{-14, -10, 8, 11}, 4, 250},
  {{-14, -10, 8, 11}, 4, 250},
  {{-14, -10, 8}, 3, 250},
  {{-14, 6, 10}, 3, 250},
  {{-10, -7, 6, 10}, 4, 250},
  {{-10, -7, 6, 10}, 4, 250},
  {{-10, -7, 6}, 3, 250},
  {{-21, 5}, 2, 250},
  {{-21, -2}, 2, 250},
  {{-21, 6}, 2, 250},
  {{-21, 5}, 2, 250},
  {{-16, -9, 3}, 3, 1000},
  {{-14, -9, 11}, 3, 750},
  {{-14, -9, 8}, 3, 250},
  {{-14, 10}, 2, 250},
  {{-14, 10}, 2, 250},
  {{-11, 10}, 2, 250},
  {{-10, 6}, 2, 250},
  {{-9, 5}, 2, 250},
  {{-9, -2}, 2, 250},
  {{-9, 6}, 2, 250},
  {{-9, 5}, 2, 250},
  {{-4, -1, 3}, 3, 125},
  {{-4, -1, 3}, 3, 750},
  {{3}, 1, 125},
  {{-9, -6, 23}, 3, 125},
  {{-9, -6, -2, 23}, 4, 625},
  {{-9, -6, -2, 20}, 4, 125},
  {{-2, 20}, 2, 125},
  {{-2, 2, 22}, 3, 125},
  {{-2, 2, 5, 22}, 4, 625},
  {{-2, 2, 5, 18}, 4, 125},
  {{5, 18}, 2, 125},
  {{-21, -9, 17}, 3, 250},
  {{-21, -9, 10}, 3, 250},
  {{-21, -9, 18}, 3, 250},
  {{-21, -9, 17}, 3, 250},
  {{15}, 1, 1000},
  {{35}, 1, 750},
  {{32}, 1, 250},
  {{34}, 1, 750},
  {{30}, 1, 250},
  {{29}, 1, 250},
  {{22}, 1, 250},
  {{30}, 1, 250},
  {{29}, 1, 250},
  {{27}, 1, 1000},
};
*/
//lyube

ChordEvent chordProgression[] = {
  {{-15, -12, -8}, 3, 750},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8, -1}, 4, 375},
  {{-15, -12, -8, 0}, 4, 375},
  {{-15, -12, -8, 2}, 4, 375},
  {{-15, -12, -8, 4}, 4, 375},
  {{-15, -12, -8, 7}, 4, 187},
  {{7}, 1, 187},
  {{-7, 9}, 2, 375},
  {{-3, 9}, 2, 375},
  {{0, 9}, 2, 375},
  {{-3, 9}, 2, 375},
  {{5, 9}, 2, 375},
  {{-3, 9}, 2, 375},
  {{0, 9}, 2, 375},
  {{-3, 9}, 2, 187},
  {{-3}, 1, 187},
  {{-12, -8, -5}, 3, 750},
  {{-12, -8, -5, 7}, 4, 375},
  {{-12, -8, -5, 7}, 4, 375},
  {{-12, -8, -5, 7}, 4, 562},
  {{-12, -8, -5, 4}, 4, 187},
  {{-12, -8, -5, 5}, 4, 375},
  {{-12, -8, -5, 4}, 4, 187},
  {{4}, 1, 187},
  {{-17, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-10, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-5, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-10, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 187},
  {{-13}, 1, 187},
  {{-15, -12, -8}, 3, 750},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8, -1}, 4, 375},
  {{-15, -12, -8, 0}, 4, 375},
  {{-15, -12, -8, 2}, 4, 375},
  {{-15, -12, -8, 4}, 4, 375},
  {{-15, -12, -8, 7}, 4, 187},
  {{7}, 1, 187},
  {{-7, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 375},
  {{0, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 375},
  {{-7, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 375},
  {{0, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 187},
  {{-3}, 1, 187},
  {{-12, -8, -5}, 3, 1125},
  {{-12, -8, -5, 4, 7}, 5, 187},
  {{-12, -8, -5, 4, 7}, 5, 187},
  {{-12, -8, -5, 4, 7}, 5, 375},
  {{-12, -8, -5, 0, 4}, 5, 375},
  {{-12, -8, -5, 2, 5}, 5, 375},
  {{-12, -8, -5, 0, 4}, 5, 187},
  {{0, 4}, 2, 187},
  {{-17, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-10, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-5, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 187},
  {{-13}, 1, 187},
  {{-10, 0}, 2, 375},
  {{-13, -1}, 2, 375},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8}, 3, 375},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8, -1}, 4, 375},
  {{-15, -12, -8, 0}, 4, 375},
  {{-15, -12, -8, 2}, 4, 375},
  {{-15, -12, -8, 4}, 4, 375},
  {{-15, -12, -8, 7}, 4, 187},
  {{7}, 1, 187},
  {{-7, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 375},
  {{0, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 375},
  {{-7, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 375},
  {{0, 5, 9}, 3, 375},
  {{-3, 5, 9}, 3, 187},
  {{-3}, 1, 187},
  {{-12, -8, -5}, 3, 1125},
  {{-12, -8, -5, 4, 7}, 5, 187},
  {{-12, -8, -5, 4, 7}, 5, 187},
  {{-12, -8, -5, 4, 7}, 5, 375},
  {{-12, -8, -5, 0, 4}, 5, 375},
  {{-12, -8, -5, 2, 5}, 5, 375},
  {{-12, -8, -5, 0, 4}, 5, 187},
  {{0, 4}, 2, 187},
  {{-17, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-10, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-5, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 187},
  {{-13}, 1, 187},
  {{-10, 0}, 2, 375},
  {{-13, -1}, 2, 375},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8}, 3, 375},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8, -1}, 4, 375},
  {{-15, -12, -8, 0}, 4, 375},
  {{-15, -12, -8, 2}, 4, 375},
  {{-15, -12, -8, 4}, 4, 562},
  {{4}, 1, 187},
  {{4}, 1, 375},
  {{9, 12}, 2, 375},
  {{-7, 9, 12}, 3, 375},
  {{-3, 9, 12}, 3, 375},
  {{0, 9, 12}, 3, 375},
  {{-3, 9, 12}, 3, 375},
  {{5, 9, 12}, 3, 375},
  {{-3, 9, 12}, 3, 375},
  {{0, 9, 12}, 3, 375},
  {{-3, 9, 12}, 3, 187},
  {{-3}, 1, 187},
  {{-8, -4, -1, 11}, 4, 750},
  {{-8, -4, -1, 4}, 4, 375},
  {{-8, -4, -1, 4}, 4, 375},
  {{-8, -4, -1, 4}, 4, 562},
  {{2}, 1, 187},
  {{0}, 1, 375},
  {{-1}, 1, 375},
  {{-15, -3}, 2, 375},
  {{-15, -3}, 0, 375},  // rest
  {{-12, -8}, 2, 375},
  {{-15}, 1, 375},
  {{-19, 0, 12}, 3, 375},
  {{0, 12}, 2, 375},
  {{-15, -12}, 2, 375},
  {{-19}, 1, 375},
  {{-12, 0}, 2, 375},
  {{0}, 1, 375},
  {{-8, -5, 0}, 3, 375},
  {{-12, 0}, 2, 375},
  {{-20, -8, 4}, 3, 750},
  {{-16, -13, 2}, 3, 750},
  {{-15, 0}, 2, 375},
  {{-15, 0}, 0, 375},  // rest
  {{-12, -8}, 2, 375},
  {{-15}, 1, 375},
  {{-19, 0}, 2, 375},
  {{0}, 1, 375},
  {{-15, -12}, 2, 375},
  {{-19}, 1, 375},
  {{-12, 0}, 2, 375},
  {{0}, 1, 375},
  {{-8, -5, 0}, 3, 375},
  {{-12, 0}, 2, 375},
  {{-20, -8, 4}, 3, 750},
  {{-16, -13, 5}, 3, 375},
  {{-16, -13, 4}, 3, 375},
  {{-15, 4}, 2, 375},
  {{4}, 1, 375},
  {{-12, -8, 0}, 3, 375},
  {{-15, 0}, 2, 375},
  {{-19, 2}, 2, 375},
  {{2}, 1, 375},
  {{-12, -8, 4}, 3, 375},
  {{-17, 4}, 2, 375},
  {{-22, 7}, 2, 750},
  {{-19, -15, 5}, 3, 375},
  {{-22, 5}, 2, 375},
  {{-20, 4}, 2, 750},
  {{-16, -13, 2, 8}, 4, 375},
  {{-20, 2, 8}, 3, 375},
  {{-15, 0, 9}, 3, 375},
  {{0, 9}, 2, 375},
  {{-12, -8, 0, 4}, 4, 375},
  {{-15, 0, 4}, 3, 375},
  {{-22, 2, 7}, 3, 750},
  {{-19, -13, 2, 5}, 4, 375},
  {{-22, 2, 5}, 3, 375},
  {{-15, 0, 4}, 3, 750},
  {{-12, -8, 0, 9}, 4, 375},
  {{-15, 0, 9}, 3, 375},
  {{-20, 4, 12}, 3, 750},
  {{-16, -10, 2, 11}, 4, 375},
  {{-20, 2, 11}, 3, 375},
  {{-15, 0, 9}, 3, 2062},
  {{-15, 0, 9}, 0, 187},  // rest
  {{-15, -12, -8}, 3, 750},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8, -1}, 4, 375},
  {{-15, -12, -8, 0}, 4, 375},
  {{-15, -12, -8, 2}, 4, 375},
  {{-15, -12, -8, 4}, 4, 375},
  {{-15, -12, -8, 7}, 4, 187},
  {{7}, 1, 187},
  {{-19, 5, 9}, 3, 375},
  {{-12, 5, 9}, 3, 375},
  {{-7, 5, 9}, 3, 375},
  {{-12, 5, 9}, 3, 375},
  {{-3, 0, 5}, 3, 375},
  {{-12, 0, 5}, 3, 375},
  {{-7, 0, 5}, 3, 375},
  {{-12, 0, 5}, 3, 375},
  {{-24, 0, 4}, 3, 375},
  {{-17}, 1, 375},
  {{-12, 7}, 2, 375},
  {{-17, 7}, 2, 375},
  {{-8, 4, 7}, 3, 375},
  {{-17}, 1, 187},
  {{0, 4}, 2, 187},
  {{-12, 2, 5}, 3, 375},
  {{-17, 0, 4}, 3, 375},
  {{-17, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-10, -1, 2}, 3, 375},
  {{-13, -1, 2}, 3, 375},
  {{-5}, 1, 375},
  {{-13}, 1, 375},
  {{-10}, 1, 375},
  {{-13}, 1, 375},
  {{-15}, 1, 375},
  {{-12}, 1, 375},
  {{-8, -3}, 2, 375},
  {{-12, -1}, 2, 375},
  {{-3, 0}, 2, 375},
  {{-12, 2}, 2, 375},
  {{-8, 4}, 2, 375},
  {{-12, 7}, 2, 375},
  {{-19, 5, 9}, 3, 375},
  {{-12, 5, 9}, 3, 375},
  {{-7}, 1, 375},
  {{-12}, 1, 375},
  {{-3, 0, 5}, 3, 375},
  {{-12}, 1, 375},
  {{-7, 0, 5}, 3, 375},
  {{-12}, 1, 375},
  {{-24, 0, 4}, 3, 375},
  {{-17}, 1, 375},
  {{-12}, 1, 375},
  {{-17, 4, 7}, 3, 187},
  {{-17, 4, 7}, 3, 187},
  {{-8, 4, 7}, 3, 375},
  {{-17}, 1, 187},
  {{-17, 0, 4}, 3, 187},
  {{-12, 2, 5}, 3, 375},
  {{-17, 0, 4}, 3, 375},
  {{-17, -1, 2}, 3, 375},
  {{-13}, 1, 375},
  {{-10}, 1, 375},
  {{-13}, 1, 375},
  {{-5}, 1, 375},
  {{-13}, 1, 375},
  {{-10, 0}, 2, 375},
  {{-13, -1}, 2, 375},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8}, 3, 375},
  {{-15, -12, -8, -3}, 4, 375},
  {{-15, -12, -8, -1}, 4, 375},
  {{-15, -12, -8, 0}, 4, 375},
  {{-15, -12, -8, 2}, 4, 375},
  {{-15, -12, -8, 0, 4}, 5, 375},
  {{-15, -12, -8, 9, 12}, 5, 187},
  {{9, 12}, 2, 187},
  {{-19, 9, 12}, 3, 375},
  {{-12, 9, 12}, 3, 375},
  {{-7, 9, 12}, 3, 375},
  {{-12, 9, 12}, 3, 375},
  {{-3, 9, 12}, 3, 375},
  {{-12, 9, 12}, 3, 375},
  {{-7, 9, 12}, 3, 375},
  {{-12, 9, 12}, 3, 187},
  {{-12}, 1, 187},
  {{-8, -4}, 2, 187},
  {{-8, -4, -1}, 3, 562},
  {{-8, -4, -1, 4}, 4, 375},
  {{-8, -4, -1, 4}, 4, 375},
  {{-8, -4, -1, 4}, 4, 562},
  {{-8, -4, -1, 2}, 4, 187},
  {{-8, -4, -1, 0}, 4, 375},
  {{-8, -4, -1}, 3, 62},
  {{-8, -4, -1}, 3, 312},
  {{-15, -3}, 2, 375},
  {{-15, -3}, 0, 375},  // rest
  {{-12, -8}, 2, 375},
  {{-15}, 1, 375},
  {{-19, 0}, 2, 375},
  {{0}, 1, 375},
  {{-15, -12}, 2, 375},
  {{-19}, 1, 375},
  {{-12, 0, 12}, 3, 375},
  {{0, 12}, 2, 375},
  {{-8, -5, 0, 12}, 4, 375},
  {{-12, 0, 12}, 3, 375},
  {{-20, -8, 4, 16}, 4, 750},
  {{-16, -13, 2, 14}, 4, 375},
  {{-16, -13, 11}, 3, 375},
  {{-15, 0, 12}, 3, 375},
  {{0, 12}, 2, 375},
  {{-12, -8}, 2, 375},
  {{-15}, 1, 375},
  {{-19, 0}, 2, 375},
  {{0}, 1, 375},
  {{-15, -12}, 2, 375},
  {{-19}, 1, 375},
  {{-12, 0}, 2, 375},
  {{0}, 1, 375},
  {{-8, -5, 0}, 3, 375},
  {{-12, 0}, 2, 375},
  {{-20, -8, 4}, 3, 750},
  {{-16, -13, 5}, 3, 375},
  {{-16, -13, 4}, 3, 375},
  {{-15, 4}, 2, 375},
  {{4}, 1, 375},
  {{-12, -8, 0}, 3, 375},
  {{-15, 0}, 2, 375},
  {{-19, 2}, 2, 375},
  {{2}, 1, 375},
  {{-12, -8, 4}, 3, 375},
  {{-17, 4}, 2, 375},
  {{-22, 7}, 2, 750},
  {{-19, -15, 0, 5}, 4, 375},
  {{-22, 0, 5}, 3, 375},
  {{-20, 4}, 2, 750},
  {{-16, -13, 2, 8}, 4, 375},
  {{-20, 2, 8}, 3, 375},
  {{-15, 0, 9}, 3, 375},
  {{0, 9}, 2, 375},
  {{-12, -8, 0, 4}, 4, 375},
  {{-15, 0, 4}, 3, 375},
  {{-22, 2, 7}, 3, 750},
  {{-19, -13, 2, 5}, 4, 375},
  {{-22, 2, 5}, 3, 375},
  {{-15, 0, 4}, 3, 750},
  {{-12, -8, 0, 9}, 4, 375},
  {{-15, 0, 9}, 3, 375},
  {{-20, 4, 12}, 3, 750},
  {{-16, -10, 2, 11}, 4, 375},
  {{-20, 2, 11}, 3, 375},
  {{-15, 0, 9}, 3, 1500},
  {{-17, 11, 14, 19}, 4, 375},
  {{-17, 11, 14, 17}, 4, 375},
  {{-5, 7, 11, 16}, 4, 375},
  {{-5, 7, 11, 14}, 4, 375},
  {{-24, 4, 7, 12}, 4, 750},
  {{-12, 12, 16, 19}, 4, 750},
  {{-17, 11, 14, 19}, 4, 375},
  {{-17, 11, 14, 17}, 4, 375},
  {{-5, 7, 11, 16}, 4, 375},
  {{-5, 7, 11, 14}, 4, 375},
  {{-15, 4, 9, 12}, 4, 750},
  {{-3, 9, 12, 16}, 4, 750},
  {{-20, 7, 11, 16}, 4, 375},
  {{-20, 7, 11, 14}, 4, 375},
  {{-8, 4, 7, 12}, 4, 375},
  {{-8, 4, 7, 11}, 4, 375},
  {{-19, -7, 0, 5, 9}, 5, 750},
  {{-7, 5, 9, 12}, 4, 750},
  {{-24, -12, 0, 4, 7}, 5, 750},
  {{-12, 4, 7, 12}, 4, 750},
  {{-17, 7, 11, 14}, 4, 750},
  {{-5, 7, 11, 14, 17}, 5, 750},
  {{-24, 7, 12, 16}, 4, 750},
  {{-12}, 1, 750},
  {{-24, 12, 16, 19}, 4, 750},
  {{-12, 12, 16, 19}, 4, 750},
  {{-17, 11, 14, 19}, 4, 375},
  {{-17, 11, 14, 17}, 4, 375},
  {{-5, 7, 11, 16}, 4, 375},
  {{-5, 7, 11, 14}, 4, 375},
  {{-15, 4, 9, 12}, 4, 750},
  {{-3, 9, 12, 16}, 4, 750},
  {{-20, 7, 11, 16}, 4, 375},
  {{-20, 7, 11, 14}, 4, 375},
  {{-8, 4, 7, 12}, 4, 375},
  {{-8, 4, 7, 11}, 4, 375},
  {{-19, 0, 5, 9}, 4, 750},
  {{-7, 5, 9, 12}, 4, 750},
  {{-24, -12, 0, 4, 7}, 5, 750},
  {{-12, 4, 7, 12}, 4, 750},
  {{-17, 7, 11, 14}, 4, 750},
  {{-5, 7, 11, 14, 17}, 5, 750},
  {{-24, 7, 12, 16}, 4, 750},
  {{-12}, 1, 750},
  {{-24}, 1, 750},
  {{-12, -8, -5}, 3, 375},
  {{-12, -8, -5, 19}, 4, 187},
  {{-12, -8, -5, 19}, 4, 187},
  {{-17, 19}, 2, 375},
  {{-17, 17}, 2, 375},
  {{-5, -1, 2, 16}, 4, 375},
  {{-5, -1, 2, 14}, 4, 375},
  {{-15, 12}, 2, 750},
  {{-3, 0, 4}, 3, 375},
  {{-3, 0, 4, 16}, 4, 187},
  {{-3, 0, 4, 16}, 4, 187},
  {{-20, 16}, 2, 375},
  {{-20, 14}, 2, 375},
  {{-8, -5, -1, 12}, 4, 375},
  {{-8, -5, -1, 11}, 4, 375},
  {{-19, 9}, 2, 750},
  {{-7, 9, 12, 17}, 4, 750},
  {{-24, 7, 12, 16}, 4, 750},
  {{4}, 1, 375},
  {{5}, 1, 375},
  {{-20, 4}, 2, 375},
  {{-20, 2}, 2, 375},
  {{-20, 0}, 2, 375},
  {{-20, -1}, 2, 375},
  {{-15, -3}, 2, 375},
  {{-12}, 1, 375},
  {{-8}, 1, 375},
  {{-12}, 1, 375},
  {{-19, 0}, 2, 375},
  {{-15}, 1, 375},
  {{-12}, 1, 375},
  {{-15}, 1, 375},
  {{-12, 0}, 2, 375},
  {{-8, 0}, 2, 375},
  {{-5, 0}, 2, 375},
  {{-8, 0}, 2, 375},
  {{-20, 4}, 2, 375},
  {{-16, 4}, 2, 375},
  {{-13, 2}, 2, 375},
  {{-16, -1}, 2, 375},
  {{-15, -3}, 2, 375},
  {{-12}, 1, 375},
  {{-8}, 1, 375},
  {{-12}, 1, 375},
  {{-19, 0}, 2, 375},
  {{-15, 0}, 2, 375},
  {{-12}, 1, 375},
  {{-15}, 1, 375},
  {{-12, 0}, 2, 375},
  {{-8, 0}, 2, 375},
  {{-5, 0}, 2, 375},
  {{-8, 0}, 2, 375},
  {{-20, 4}, 2, 375},
  {{-16, 4}, 2, 375},
  {{-13, 5}, 2, 375},
  {{-16, 4}, 2, 375},
  {{-15, 4}, 2, 375},
  {{-12}, 1, 375},
  {{-8, -3, 0}, 3, 375},
  {{-12, 0}, 2, 375},
  {{-17, -1, 2}, 3, 375},
  {{-12, -1, 2}, 3, 375},
  {{-8, 0, 4}, 3, 375},
  {{-12, 0, 4}, 3, 375},
  {{-22, 4, 7}, 3, 375},
  {{-19, 4, 7}, 3, 375},
  {{-15, 2, 5}, 3, 375},
  {{-19, 2, 5}, 3, 375},
  {{-20, 0, 4}, 3, 375},
  {{-16, 0, 4}, 3, 375},
  {{-13, 2, 8}, 3, 375},
  {{-16, 2, 8}, 3, 375},
  {{-15, 0, 9}, 3, 375},
  {{-12, 0, 9}, 3, 375},
  {{-8, 0, 4}, 3, 375},
  {{-12, 0, 4}, 3, 375},
  {{-22, 2, 7}, 3, 375},
  {{-19, 2, 7}, 3, 375},
  {{-15, 2, 5}, 3, 375},
  {{-19, 2, 5}, 3, 375},
  {{-20, -8, 0, 4}, 4, 375},
  {{-15, 0, 4}, 3, 375},
  {{-12, 0, 9}, 3, 375},
  {{-15, 0, 9}, 3, 375},
  {{-20, 4, 12}, 3, 375},
  {{-16, 4, 12}, 3, 375},
  {{-13, 2, 11}, 3, 375},
  {{-16, 2, 11}, 3, 375},
  {{-15, -12, -8, -3, 0, 4, 9}, 7, 1312},
  {{-15, -12, -8}, 3, 187},
};



  const int chordCount = sizeof(chordProgression) / sizeof(ChordEvent);
  void playChordProgression() {
    for (int i = 0; i < chordCount; i++) {
      playChord(chordProgression[i]);
    }
  }

  
// Render the second core
void* esp_render_task(void*) {
  while (1) {
    // Wait for a message that it's time to start rendering
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    // Scan the keyboard
    keyboard.update();
    // Render
    amy.render(0, AMY_OSCS / 2, 1);
    // Tell the other core we're done rendering
    xTaskNotifyGive(amy_fill_buffer_handle);
  }
}

// Make AMY's FABT run forever , as a FreeRTOS task
void* esp_fill_audio_buffer_task(void*) {
  while (1) {
    // Get ready to render
    amy.prepare();
    // Tell the other core to start rendering
    xTaskNotifyGive(amy_render_handle);
    // Render me
    amy.render(AMY_OSCS / 2, AMY_OSCS, 0);
    // Wait for the other core to finish
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

    // Write to i2s
    int16_t* block = amy.fill_buffer();
    I2S.write((uint8_t*)block, AMY_BLOCK_SIZE * AMY_NCHANS * AMY_BYTES_PER_SAMPLE);
  }
}

void setup() {
    Serial.begin(115200);

    // Initialize the LED status
    pinMode(LED_PIN, OUTPUT);

    // Initialize the keyboard
    keyboard.begin();
    keyboard.onKeyPress(noteOn);
    keyboard.onKeyRelease(noteOff);

    // I2S
    I2S.setPins(CONFIG_I2S_BCLK, CONFIG_I2S_LRCLK, CONFIG_I2S_DIN, -1, -1);
    I2S.begin(I2S_MODE_STD, AMY_SAMPLE_RATE, I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_MONO);

    // Start up AMY
    amy.begin(2,1,1,1);

    // We create a mutex for changing the event queue and pointers as two tasks do it at once
    xQueueSemaphore = xSemaphoreCreateMutex();

    // Create the second core rendering task
    xTaskCreatePinnedToCore((TaskFunction_t)esp_render_task,
                            AMY_RENDER_TASK_NAME,
                            AMY_RENDER_TASK_STACK_SIZE,
                            NULL,
                            AMY_RENDER_TASK_PRIORITY,
                            &amy_render_handle,
                            AMY_RENDER_TASK_COREID);

    // Wait for the render tasks to get going before starting the i2s task
    delay(100);

    // And the fill audio buffer thread, combines, does volume & filters
    xTaskCreatePinnedToCore((TaskFunction_t)esp_fill_audio_buffer_task,
                            AMY_FILL_BUFFER_TASK_NAME,
                            AMY_FILL_BUFFER_TASK_STACK_SIZE,
                            NULL,
                            AMY_FILL_BUFFER_TASK_PRIORITY,
                            &amy_fill_buffer_handle,
                            AMY_FILL_BUFFER_TASK_COREID);

    // Reset the oscillators and create the voices with the selected patch
    amy.reset();
    struct event e = amy.default_event();
    e.load_patch = 180; // 180: DX7 ACCORDION
    strcpy(e.voices, "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"); // Fill the 10 voices with this patch
    amy.add_event(e);

    //delay(1000); // Give time for system to settle
    //playMelody(); // Play once
    delay(1000);
    playChordProgression(); // Now play the chord progression
}

void loop() {
  // nothing -- the audio is rendered in the esp_fill_audio_buffer_task
}
